// +build !templater
// Code generated by "templater"; DO NOT EDIT.

package sdi

// gen
import (
	"strings"
	"talk/myAGo/code/service"

	"git.vsh-labs.cz/cml/nest/pkg/shared/app"
	configurator "git.vsh-labs.cz/cml/nest/pkg/shared/di"
	"github.com/google/wire"
	"github.com/spf13/cobra"
)

type Config struct {
	NameServiceConfig0 service.Config
	NameServiceConfig2 service.Config
}

func NewConfig(prefix string,
	configurator *configurator.Handler,
) *Config {
	c := &Config{
		NameServiceConfig0: (service.Config)(service.NewConfig()),
		NameServiceConfig2: (service.Config)(service.NewConfig()),
	}
	configurator.Register(concat(prefix, "helloA"), &c.NameServiceConfig0)
	configurator.Register(concat(prefix, "helloB"), &c.NameServiceConfig2)

	return c
}

type NameServiceConfig0 service.Config

func GetNameServiceConfig0(c Config) NameServiceConfig0 {
	return NameServiceConfig0(c.NameServiceConfig0)
}

type NameServiceConfig2 service.Config

func GetNameServiceConfig2(c Config) NameServiceConfig2 {
	return NameServiceConfig2(c.NameServiceConfig2)
}

type AppConfig struct {
	configurator *configurator.Handler
	config       *Config
}

func NewAppConfig(prefix string, cmd *cobra.Command) *AppConfig {
	configurator := configurator.New(cmd)
	return &AppConfig{
		configurator: configurator,
		config:       NewConfig(prefix, configurator),
	}
}

func (c *AppConfig) Read(app *app.ApplicationSetup, cmd *cobra.Command) error {
	return c.configurator.Read(app, cmd)
}

func (c *AppConfig) Configurator() *configurator.Handler {
	return c.configurator
}

func (c *AppConfig) Register(prefix string, in interface{}) {
	c.configurator.Register(prefix, in)
}

func (c *AppConfig) ConfigCommand(app *app.ApplicationSetup) *cobra.Command {
	return c.configurator.ConfigCommand(app)
}

func (c AppConfig) Config() Config {
	return *c.config
}

var ConfigSet = wire.NewSet(
	GetNameServiceConfig0,
	GetNameServiceConfig2,
)

func concat(parts ...string) string {
	var result []string
	for _, part := range parts {
		p := strings.TrimPrefix(part, "<")
		if strings.HasPrefix(part, "<") && len(result) > 0 {
			result[len(result)-1] = p
		} else {
			result = append(result, p)
		}
	}
	return strings.Join(result, ".")
}

var ServiceSet = wire.NewSet(
	GetNameServiceHello1,
	GetNameServiceHello3,
)

type NameServiceHello1 service.Hello

func GetNameServiceHello1(arg0 NameServiceConfig0,
	arg1 service.Formater,
) *NameServiceHello1 {

	return (*NameServiceHello1)(service.New((service.Config)(arg0),
		(service.Formater)(arg1),
	))

}

type NameServiceHello3 service.Hello

func GetNameServiceHello3(arg0 NameServiceConfig2,
	arg1 service.Formater,
) *NameServiceHello3 {

	return (*NameServiceHello3)(service.New((service.Config)(arg0),
		(service.Formater)(arg1),
	))

}

func NewApplication(
	systemApp *app.ApplicationSetup,
	_ *NameServiceHello1,
	_ *NameServiceHello3,
) *App {
	return &App{
		app: systemApp,
	}
}

type App struct {
	app *app.ApplicationSetup
}

func (h *App) Run() error {
	return h.runner.RunWithSigTerm(h.app.Context, h.app.Cancel)
}

func CreateCommand(app *app.ApplicationSetup) *cobra.Command {

	cmd := &cobra.Command{
		Use:   "",
		Short: "",
		Long:  "",
	}

	cfg := NewAppConfig("app", cmd)

	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		if err := cfg.Read(app, cmd); err != nil {
			return err
		}

		application, err := CreateApp(app, cfg.Config())
		if err != nil {
			panic(err)
		}
		return application.Run()
	}
	cmd.AddCommand(cfg.ConfigCommand(app))

	return cmd
}
